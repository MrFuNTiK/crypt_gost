#include <cstring>
#include <tuple>
#include <functional>

#include <core/math/math.hpp>

#include <gtest/gtest.h>

using namespace crypt_gost::core::math;

using test_param_t = std::tuple< LongNumber< 128 >, LongNumber< 128 >, LongNumber< 128 > >;
class MathTest : public ::testing::TestWithParam< test_param_t >
{
};

TEST_F( MathTest, Serialization )
{
    LongNumber< 128 > number1{ 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
                               0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10 };
    LongNumber< 128 > number2{ 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09,
                               0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01 };
    auto number3 = number1 + number2;

    std::stringstream ss;
    ss << number1;
    ASSERT_STREQ( ss.str().c_str(), "01:02:03:04:05:06:07:08:09:0a:0b:0c:0d:0e:0f:10" );
    ss.str( "" );
    ss << number2;
    ASSERT_STREQ( ss.str().c_str(), "10:0f:0e:0d:0c:0b:0a:09:08:07:06:05:04:03:02:01" );
    ss.str( "" );
    ss << number3;
    ASSERT_STREQ( ss.str().c_str(), "11:11:11:11:11:11:11:11:11:11:11:11:11:11:11:11" );
}

TEST_P( MathTest, Addition )
{
    auto a = std::get< 0 >( GetParam() );
    auto b = std::get< 1 >( GetParam() );
    auto res = std::get< 2 >( GetParam() );

    auto sum = a + b;
    ASSERT_EQ( sum, res );
    sum = b + a;
    ASSERT_EQ( sum, res );
}

TEST_F( MathTest, Shift )
{
    // clang-format off
    LongNumber<128> a{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x11}; 
    LongNumber<128> b{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x00}; 
    LongNumber<128> c{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x00, 0x00};
    LongNumber<128> d{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x00, 0x00, 0x00};
    LongNumber<128> e{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00};
    LongNumber<128> f{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00};
    // clang-format on

    a <<= 8;
    EXPECT_EQ( a, b );
    a <<= 8;
    EXPECT_EQ( a, c );
    a <<= 8;
    EXPECT_EQ( a, d );
    a <<= 8;
    EXPECT_EQ( a, e );
    a <<= 8;
    EXPECT_EQ( a, f );
}

// clang-format off
INSTANTIATE_TEST_CASE_P(
    CoreTest, MathTest, ::testing::Values(
            //*
            test_param_t
            (
                LongNumber<128>( { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 } ),
                LongNumber<128>( { 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02 } ),
                LongNumber<128>( { 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03 } )
            ),
            test_param_t
            (
                LongNumber<128>( { 0x01, 0x01, 0x01, 0x01, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } ),
                LongNumber<128>( { 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 } ),
                LongNumber<128>( { 0x01, 0x02, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } )
            ),
            test_param_t
            (
                LongNumber<128>( { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } ),
                LongNumber<128>( { 0x00, 0x00, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12 } ),
                LongNumber<128>( { 0x00, 0x00, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11 } )
            ),
            //*/
            test_param_t
            (
                LongNumber<128>( { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } ),
                LongNumber<128>( { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } ),
                LongNumber<128>( { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe } )
            ),
            test_param_t
            (
                LongNumber<128>( { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } ),
                LongNumber<128>( { 0x01, 0x01, 0x01, 0x01, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } ),
                LongNumber<128>( { 0x01, 0x01, 0x01, 0x01, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } )
            ),
            test_param_t
            (
                LongNumber<128>(12345), LongNumber<128>(234), LongNumber<128>(12579)
            )
        )
    );
// clang-format on
