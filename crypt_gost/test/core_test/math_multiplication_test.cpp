#include <cstring>
#include <tuple>
#include <functional>

#include <core/math/math.hpp>

#include <gtest/gtest.h>

using namespace crypt_gost::core::math;

using test_param_t = std::tuple< LongNumber< 128 >, uint32_t >;
class MultiplicationTest : public ::testing::TestWithParam< test_param_t >
{
};

TEST_P( MultiplicationTest, Multiplication )
{
    LongNumber< 128 > a{ std::get< 0 >( GetParam() ) };
    uint32_t bVal = std::get< 1 >( GetParam() );
    LongNumber< 128 > b = bVal;
    LongNumber< 128 > expected = 0;
    LongNumber< 128 > mult;

    for( uint32_t i = 0; i < bVal; ++i )
    {
        expected += a;
    }

    mult = a;
    mult *= b;
    ASSERT_EQ( expected, mult ) << "FAILED WITH INTEGER: " << std::dec << bVal;

    mult = b;
    mult *= a;
    ASSERT_EQ( expected, mult ) << "FAILED WITH INTEGER: " << std::dec << bVal;
    ;

    mult = a * b;
    ASSERT_EQ( expected, mult ) << "FAILED WITH INTEGER: " << std::dec << bVal;
    ;
    mult = b * a;
    ASSERT_EQ( expected, mult ) << "FAILED WITH INTEGER: " << std::dec << bVal;
    ;
}

// clang-format off
INSTANTIATE_TEST_CASE_P(
    CoreTest, MultiplicationTest, ::testing::Combine(
        ::testing::Values(
            LongNumber<128>( (const uint8_t[]){ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } ),
            LongNumber<128>( (const uint8_t[]){ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 } ),
            LongNumber<128>( (const uint8_t[]){ 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 } ),
            LongNumber<128>( (const uint8_t[]){ 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02 } ),
            LongNumber<128>( (const uint8_t[]){ 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03 } ),
            LongNumber<128>( (const uint8_t[]){ 0x01, 0x01, 0x01, 0x01, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } ),
            LongNumber<128>( (const uint8_t[]){ 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 } ),
            LongNumber<128>( (const uint8_t[]){ 0x01, 0x02, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } ),
            LongNumber<128>( (const uint8_t[]){ 0x00, 0x00, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12 } ),
            LongNumber<128>( (const uint8_t[]){ 0x00, 0x00, 0xff, 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11 } ),
            LongNumber<128>( (const uint8_t[]){ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } )
         ),
        ::testing::Values( 0u, 1u, 2u, 100u, 500u, 5245u, 24535u, 124245u, 298956u, 2352467u )
    )
    );
// clang-format on
